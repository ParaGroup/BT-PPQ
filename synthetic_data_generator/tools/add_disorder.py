#!/usr/bin/python
# 
# Program: Script to add disorder in a dataset of tuples with a given format. The goal
#          is to generate the timestamps that the generator will use to produce data. These
#          timestamps are generated by adding a random delay to the application timestamps.
#          The dataset will be ordered by the new timestamps generated.
# Date:    March 2016
# Author:  Gabriele Mencagli <mencagli@di.unipi.it>

import sys
import getopt
import random
import struct
import numpy as np
from operator import itemgetter

# function to read the dataset from a file (the one generated by stream_generator.py)
def read_dataset(filename):
	file_in = open(filename, "r")
	dataset = []
	for line in file_in:
		dataset.append([float(x) for x in line.split()])
	return dataset

# function to append the generator timestamps to each tuple in the dataset
def add_delay(dataset, delay):
	for point in dataset:
		# uniform delay in the interval [0, delay)
		mydelay = np.random.uniform(0, delay*2)
		# obtain the application timestamp and add mydelay to it
		gen_timestamp = point[len(point)-1] + mydelay # generator timestamp
		# append the generator timestamp as a new parameter of the tuple
		point.append(gen_timestamp)
	return dataset

# print the dataset into a text file
def print_text_file(filename, dataset):
	file_out = open(filename, 'w')
	for i in range (0, len(dataset)):
		for j in range(0, len(dataset[i])-1):
			file_out.write(str(dataset[i][j]) + ' ')
		file_out.write(str(dataset[i][len(dataset[i])-1]) + '\n')
	file_out.close()

# print the dataset into a binary file
def print_binary_file(filename, dataset):
	file_out = open(filename, 'wb')
	dim = len(dataset[0])
	for i in range (0, len(dataset)):
		file_out.write(struct.pack('d' * dim, *dataset[i]))
	file_out.close()

# function to oder the dataset based on the generator timestamps
def order_dataset(dataset):
	# sort the dataset using the last parameter of each tuple (generator timestamp)
	index = len(dataset[0])-1
	dataset_ord = sorted(dataset, key = itemgetter(index))
	return dataset_ord

# function to compute the hamming distance between two lists of the same length
def hamming_distance(list1, list2):
	h_distance = 0
	for i in range(0, len(list1)):
		if list1[i] ==  list2[i]:
			h_distance = h_distance+1
	return len(list1)-h_distance

# function to measure the average inter-arrival time based on the generator timestamps
def get_avg_ta(dataset):
	avg = 0.
	count = 0.
	dim = len(dataset[0])
	for i in range(0, len(dataset)-1):
		count = count + 1
		offset = dataset[i+1][dim-1]-dataset[i][dim-1]
		avg = avg + (1/count) * (offset - avg)
	return avg

# function to compute the number of late arrivals
def get_l_arrivals(dataset):
	count = 0
	max_ts = 0
	for i in range(0, len(dataset)):
		# index of the application timestamp attribute
		index = len(dataset[i])-2
		timestamp = dataset[i][index]
		if(timestamp < max_ts):
			count = count+1
		max_ts = timestamp if (timestamp>max_ts) else max_ts
	return count

if __name__ ==  "__main__":
	if(len(sys.argv) !=  7):
		sys.stdout.write("Usage: " + sys.argv[0] + " -d <delay usecs> -i <filename> -o <filename>" + '\n')
		sys.exit(0)
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'd:i:o:')
	except getopt.GetoptError:
		sys.stdout.write("Usage: " + sys.argv[0] + " -d <delay usecs> -i <filename> -o <filename>" + '\n')
		sys.exit(-1)
	for opt, arg in opts:
		if opt in ('-d'):
			delay = float(arg)
		elif opt in ('-i'):
			filein = str(arg)
		elif opt in ('-o'):
			fileout = str(arg)
		else:
			sys.stdout.write("Usage: " + sys.argv[0] + " -d <delay usecs> -i <filename> -o <filename>" + '\n')
			sys.exit(-1)
	# read the dataset from the input file (the one generated by stream_generator.py)
	dataset = read_dataset(filein)
	# modify the dataset by adding the generator timestamps
	dataset_new = add_delay(dataset, delay)
	# order the dataset based on the generator timestamps
	dataset_ord = order_dataset(dataset_new)
	# print the new dataset in the output file
	#print_text_file(fileout, dataset_ord)
	print_binary_file(fileout, dataset_ord)
	# print some statistics
	sys.stdout.write("Hamming distance: " + str(hamming_distance(dataset_new, dataset_ord)) + '\n')
	sys.stdout.write("No. late arrivals: " + str(get_l_arrivals(dataset_ord)) + '\n')
	avg_ta = get_avg_ta(dataset_ord)
	sys.stdout.write("Mean inter-arrival time: " + str(avg_ta) + ' usec\n')
	sys.stdout.write("Mean arrival rate: " + str(1000000/avg_ta) + ' tuples/sec\n')
